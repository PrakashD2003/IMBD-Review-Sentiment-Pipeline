#
# Dockerfile for the IMDB Training Service
#

# ==============================================================================
# Build Stage
#
# This stage installs build tools and Python dependencies into a virtual
# environment. The final runtime image will copy artifacts from this stage,
# keeping the final image lean and secure.
# ==============================================================================
FROM python:3.12-slim AS build
WORKDIR /app

# Set environment variables for optimized Docker builds and logging.
# - PYTHONDONTWRITEBYTECODE: Prevents Python from writing .pyc files.
# - PYTHONUNBUFFERED: Ensures logs are sent directly to the terminal without buffering.
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install build-time dependencies.
# - gcc & build-essential: For compiling Python packages with C extensions.
# - git: Required by DVC to link data versions to Git commits.
# These will be discarded after the build stage.
RUN apt-get update && apt-get install -y --no-install-recommends \
      gcc build-essential git \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies into an isolated virtual environment.
# This keeps the global Python environment clean and ensures dependency isolation.
COPY common-requirements.txt .
COPY requirements-training.txt .
RUN python -m venv /opt/venv \
 && /opt/venv/bin/pip install --no-cache-dir -r requirements-training.txt

# Copy the application source code and DVC configuration into the build stage.
# This ensures all necessary files are present for the runtime stage.
COPY services/training /app/services/training
COPY common /app/common
COPY dvc.yaml dvc.lock /app/
COPY params.yaml params.yaml /app/

# ==============================================================================
# Runtime Stage
#
# This stage creates the final, minimal image that will be deployed. It copies
# the pre-built virtual environment and application code from the 'build' stage.
# ==============================================================================
FROM python:3.12-slim AS runtime
WORKDIR /app

# Set environment variables for the runtime environment.
# Update the PATH to include the virtual environment's bin directory.
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH"

# Install runtime dependencies: git for DVC and libgomp1 for LightGBM.
RUN apt-get update && apt-get install -y --no-install-recommends \
      git \
      libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Copy the virtual environment and application code from the 'build' stage.
COPY --from=build /opt/venv /opt/venv
COPY --from=build /app /app

# Create a non-root user and switch to it for enhanced security.
# Running as a non-root user is a critical security best practice.
RUN useradd -m appuser && chown -R appuser:appuser /app
USER appuser

# Create a dynamic entrypoint script. This script runs on container startup
# to configure DVC based on environment variables, making the image portable
# across different environments (local, staging, production).
RUN printf '%s\n' \
  '#!/usr/bin/env sh' \
  'set -e' \
  'cd /app' \
  '' \
  '# Idempotent check: Initialize a DVC repository only if it does not already exist.' \
  '[ -d ".dvc" ] || dvc init --no-scm' \
  '' \
  '# If DVC_REMOTE_URL is provided, configure the DVC remote storage at runtime.' \
  '# This avoids baking storage credentials or configurations into the image.' \
  'if [ -n "$DVC_REMOTE_URL" ]; then' \
  '  if dvc remote list | grep -q "^storage"; then' \
  '    # If a remote named "storage" exists, modify its URL.' \
  '    dvc remote modify storage url "$DVC_REMOTE_URL" || true' \
  '  else' \
  '    # Otherwise, add a new remote named "storage".' \
  '    dvc remote add -f -d storage "$DVC_REMOTE_URL" || true' \
  '  fi' \
  'fi' \
  '' \
  '# Execute the main container command (the CMD instruction).' \
  'exec "$@"' > /app/entrypoint.sh \
  && sed -i 's/\r$//' /app/entrypoint.sh \
  && chmod +x /app/entrypoint.sh

# Expose the port the FastAPI application will run on.
EXPOSE 8001

# Set the entrypoint to our custom script.
ENTRYPOINT ["/app/entrypoint.sh"]

# Define the default command to run when the container starts.
# This starts the Uvicorn server for the training FastAPI application.
CMD ["uvicorn", "services.training.api_end_point.training_fastapi_app:app", "--host", "0.0.0.0", "--port", "8001"]